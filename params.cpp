#if !defined(WIN32)
#include <Arduino.h>
#endif

#include "params.h"

#include "utils.h"
#include "time.h"
#include <algorithm>

void log(char* s)
{
#if defined(WIN32)
	printf("%s\n", s);
#else
	Serial.println(s);
#endif
}

void OperatorParams::randomize()
{
	attn = (uint32_t)rand() % 63;
	wave = (uint32_t)rand() % 7;
	mult = (uint32_t)rand() % 4;
	a = (uint32_t)rand() % 15;
	d = (uint32_t)rand() % 15;
	s = (uint32_t)rand() % 15;
	r = (uint32_t)rand() % 15;
	en_sus = (uint32_t)rand() % 2;
	en_tre = (uint32_t)rand() % 2;
	en_vib = (uint32_t)rand() % 2;
}

void OperatorParams::tweak()
{
	attn = ::tweak(attn) % 15;
	wave = ::tweak(wave) % 7;
	mult = ::tweak(mult) % 4;
	a = ::tweak(a) % 15;
	d = ::tweak(d) % 15;
	s = ::tweak(s) % 15;
	r = ::tweak(r) % 15;
}

void OperatorParams::log()
{
	char buf[30];

	sprintf(buf, "attn: %d", attn);
	::log(buf);

	sprintf(buf, "mult: %d", mult);
	::log(buf);

	sprintf(buf, "wave: %d", wave);
	::log(buf);

	sprintf(buf, "a: %d", a);
	::log(buf);

	sprintf(buf, "d: %d", d);
	::log(buf);

	sprintf(buf, "s: %d", s);
	::log(buf);

	sprintf(buf, "r: %d", r);
	::log(buf);
}

void VoiceParams::randomize()
{
	feedback = (uint32_t)rand() % 7;
	ops[0].randomize();
	ops[1].randomize();
	ops[2].randomize();
	ops[3].randomize();
}

void VoiceParams::tweak()
{
	feedback = ::tweak(feedback) % 7;
	ops[0].tweak();
	ops[1].tweak();
	ops[2].tweak();
	ops[3].tweak();
}

void VoiceParams::log()
{
	char buf[30];

	sprintf(buf, "=== voice ===");
	::log(buf);

	sprintf(buf, "freq: %f", freq);
	::log(buf);

	sprintf(buf, "conn: %d", conn);
	::log(buf);

	sprintf(buf, "feedback: %d", feedback);
	::log(buf);

	for(int i = 0; i < 4; ++i)
	{
		sprintf(buf, "=== op %d ===", i);
		::log(buf);

		ops[i].log();
	}
}

#if defined(WIN32)

void Params::saveFactorySettings(const char* filename)
{
	if(FILE* f = fopen(filename, "wb+"))
	{
		const char* headerString = R"(// %s
// Autogenerated factory settings. Do not modify.
#pragma once
#include "params.h"
)";

		time_t rawtime;
		struct tm * timeinfo;
		char buffer[80];

		time (&rawtime);
		timeinfo = localtime(&rawtime);

		strftime(buffer,sizeof(buffer),"%d-%m-%Y %H:%M:%S",timeinfo);
		fprintf(f, headerString, buffer);

		fprintf(f, "static const uint8_t FACTORY_SETTINGS_PARAMS_DATA[] PROGMEM = {\n");

		uint8_t* base = (uint8_t*)this;
		size_t totalSize = sizeof(Params);
		size_t totalRows = totalSize / 16;
		size_t remainingSize = totalSize;
		size_t currOffset = 0;

		for(int i = 0; i < totalRows; ++i)
		{
			fprintf(f, "\t");
			size_t width = std::min(remainingSize, (size_t)16);
			for(int j = 0; j < width; ++j)
			{
				fprintf(f, "0x%.2x, ", base[currOffset++]);
			}
			fprintf(f, "\n");
		}


		fprintf(f, "};\n");

		fprintf(f, "static const Params* FACTORY_SETTINGS_PARAMS = (const Params*)FACTORY_SETTINGS_PARAMS_DATA;\n");


#if 0
		const char* opString = R"(
				// Operator %i
				{
					%i, /*attn*/ %i, /*wave*/ 
					%i, /*a*/ %i, /*d*/ %i, /*s*/ %i, /*r*/
					%i, /*en_sus*/ %i, /*en_tre*/ %i, /*en_vib*/
				},)";

		const char* voiceString = R"(
		/////////////////////////////////////////////////////////////////////
		// Voice %i
		{
			0, /*on*/
			0, /*on_latch*/ 
			%ff, /*freq*/ 
			%i, /*conn*/
			%i, /*feedback*/
			{
				%s 
				%s 
				%s
				%s
			}, /*ops*/
		},)";


		fprintf(f, "static const Params FACTORY_SETTINGS_PARAMS PROGMEM =\n{\n\t{\n");
		for(int i = 0; i < 6; ++i)
		{
			const auto& v = voices[i];
			char opsStrings[4][256];

			for(int j = 0; j < 4; ++j)
			{
				sprintf(opsStrings[j], opString,
					j,
					v.ops[j].attn, v.ops[j].wave, v.ops[j].mult,
					v.ops[j].a, v.ops[j].d, v.ops[j].s, v.ops[j].r,
					v.ops[j].en_sus, v.ops[j].en_tre, v.ops[j].en_vib);
			}

			fprintf(f, voiceString,
				i,
				v.freq, v.conn, v.feedback,
				opsStrings[0], opsStrings[1], opsStrings[2], opsStrings[3]);

			fprintf(f, "\n");
		}
		fprintf(f, "\t}\n};\n");
#endif

		fclose(f);
	}
}
#endif
